{
  "uuid": "e6b56252-1f08-431b-8bc6-1692a89ed6a2",
  "name": "1-To-Many",
  "description": "erzeugt eine bidirektionale Relation 1 zu many",
  "extraSearchTerms": [
    "1tomany"
  ],
  "tags": [
    "ged",
    "realtion"
  ],
  "code": "${:import(java.util.List, java.util.Vector, org.eclipse.persistence.indirection.ValueHolder, org.eclipse.persistence.indirection.ValueHolderInterface, de.bkm.bes.basis.annotation.Indexing, de.bkm.bes.basis.annotation.IndexingType)}\r\n\r\n/**\r\n * 1-to-many bidirektionale Relation  zur Klasse ${targetClassName:var(java.lang.String)}\r\n * Client Bezeichung ${RelationClientBezeichung:var(java.lang.String)}\r\n * Supplier Bezeichung  ${RelationBezeichung:var(java.lang.String)} bzw. ${relationBezeichung:var(java.lang.String)}\r\n */\r\n@Indexing(IndexingType.INDEX)\r\n  private List\u003c${targetClassName}\u003e ${relationBezeichung} \u003d new Vector\u003c${targetClassName}\u003e();\r\n  \r\n  /**\r\n   * Gibt ein geklontes Set mit Objekten, zu denen die Relation ${fieldNameLowerCase} besteht, zurück.\r\n   *\r\n   * @return Set mit ${targetClassName}\r\n   */\r\n  public NSet\u003c${targetClassName}\u003e get${RelationBezeichung}Set()\r\n  {\r\n    NSet\u003c${targetClassName}\u003e nSet \u003d\r\n      new NSet\u003c${targetClassName}\u003e();\r\n\t  NIterator\u003c${targetClassName}\u003e iter \u003d \r\n\t  \tget${RelationBezeichung}Iterator();\r\n\r\n\t\twhile(iter.hasNext())\r\n\t\t{\r\n\t\t\tnSet.addTo(iter.next());\r\n\t\t}\r\n    \r\n    return nSet;\r\n  }\r\n  \r\n \t/**\r\n\t * Gibt einen Iterator mit Objekten, zu denen eine Relation besteht, zurück.\r\n \t *\r\n\t * @return NIterator\u003c${targetClassName}\u003e\r\n\t */\r\n  public NIterator\u003c${targetClassName}\u003e get${RelationBezeichung}Iterator()\r\n  {\r\n  \tNIterator\u003c${targetClassName}\u003e iter \u003d \r\n  \t\tnew NIterator\u003c${targetClassName}\u003e(this.${relationBezeichung});\r\n  \t\r\n  \titer.setTaskServerControllerInterface(getTaskServerControllerInterface());\r\n  \t\r\n  \treturn iter;\r\n  }\r\n  \r\n  /**\r\n   * Fügt eine Referenz auf ${targetClassName} hinzu.\r\n   *\r\n   * @param obj Referenz auf ${targetClassName} die als Relation hinzugef�gt wird.\r\n   */\r\n  public void add${RelationBezeichung}(final ${targetClassName} obj)\r\n  {\r\n    if (obj \u003d\u003d null)\r\n    {\r\n      throw new BoException(\"Null can\u0027t be added as a relationship reference \"\r\n        + \"for ${RelationClientBezeichung}.${relationBezeichung}.\");\r\n    }\r\n\r\n    this.${relationBezeichung}.add(obj);\r\n    \r\n    //\r\n    //Beziehung auf der Gegenseite (am ${targetClassName}) zu dieser Klasse (${RelationClientBezeichung})\r\n    //mit Hilfe der set...OneWay-Methode pflegen\r\n    //\r\n    obj.set${RelationClientBezeichung}OneWay(this);\r\n  }\r\n  \r\n  /**\r\n   * Entfernt die Relation zu dem übergebenen Objekt.\r\n   *\r\n   * @param obj ${targetClassName} des Relation entfernt werden soll.\r\n   */\r\n  public void remove${RelationBezeichung}(final ${targetClassName} obj)\r\n  {\r\n    if (obj \u003d\u003d null)\r\n    {\r\n      throw new BoException(\"Null is not a reference which can be removed from\"\r\n        + \" relationship ${RelationClientBezeichung}.${relationBezeichung}.\");\r\n    }\r\n\r\n    this.${relationBezeichung}.remove(obj);\r\n    \r\n    //\r\n    //Beziehung auf der Gegenseite (am ${targetClassName}) zu dieser Klasse (${RelationClientBezeichung})\r\n    //mit Hilfe der set...OneWay-Methode auf null setzen\r\n    //\r\n    obj.set${RelationClientBezeichung}OneWay(null);\r\n  }\r\n  \r\n  /**\r\n   * TOPLink MANY_TO_ANYTHING: Wenn Attribut auf der Gegenseite navigierbar ist\r\n   *\r\n   * @param obj ${targetClassName} wird hinzugefügt.\r\n   */\r\n  public void add${RelationBezeichung}OneWay(${targetClassName} obj) \r\n  {\r\n    this.${relationBezeichung}.add(obj);\r\n  }\r\n  \r\n  /**\r\n   * TOPLink MANY_TO_ANYTHING: Wenn Attribut auf der Gegenseite navigierbar ist\r\n   *\r\n   * @param obj ${targetClassName} wird entfernt.\r\n   */\r\n  public void remove${RelationBezeichung}OneWay(${targetClassName} obj) \r\n  {\r\n    this.${relationBezeichung}.remove(obj);\r\n  }\r\n\r\n  /**\r\n   * Lieferte für TOPLink eine \u003ccode\u003eList\u003c/code\u003e der einer \"n zu\"-Relation.\r\n   *\r\n   * @return List für TOPLink lazy-loading\r\n   */\r\n  public List\u003c${targetClassName}\u003e get${RelationBezeichung}()\r\n  {\r\n    return this.${relationBezeichung};\r\n  }\r\n  \r\n  /**\r\n   * Dient TOPLink dazu die \u003ccode\u003eList\u003c/code\u003e für lazy-loading der\r\n   * \"n zu\"-Relation zu setzen.\r\n   *\r\n   * @param newList List für TOPLink lazy-loading\r\n   */\r\n  public void set${RelationBezeichung}(final List\u003c${targetClassName}\u003e newList)\r\n  {\r\n    this.${relationBezeichung} \u003d newList;\r\n  }\r\n  ",
  "location": "JAVA_TYPE_MEMBERS",
  "filenameRestrictions": [],
  "dependencies": []
}