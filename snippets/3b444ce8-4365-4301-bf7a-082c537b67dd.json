{
  "uuid": "3b444ce8-4365-4301-bf7a-082c537b67dd",
  "name": "Relation-Client",
  "description": "erweitert den Client einer Relation um die benötigten Attribute und Methoden",
  "extraSearchTerms": [
    "manytomany",
    "relation"
  ],
  "tags": [
    "ged",
    "relation"
  ],
  "code": "${:import(java.util.List, java.util.Vector, org.eclipse.persistence.indirection.ValueHolder, org.eclipse.persistence.indirection.ValueHolderInterface, de.bkm.bes.basis.annotation.Indexing, de.bkm.bes.basis.annotation.IndexingType)}\r\n\r\n/**\r\n * Relationen 1 - * (bidirektionale)\r\n * zwischen den Klassen ${primary_type_name}\r\n *   (RoleName ${ClientRoleName:var(java.lang.String)})\r\n * und ${supplierClassName:var(java.lang.String)}\r\n *   (RoleName ${SupplierRoleName:var(java.lang.String)} / ${supplierRoleName:var(java.lang.String)})\r\n * \u003cbr\u003e\r\n */\r\n@Indexing(IndexingType.INDEX)\r\nprivate List\u003c${supplierClassName}\u003e relation${supplierRoleName} \u003d new Vector\u003c${supplierClassName}\u003e();\r\n\r\n/**\r\n   * Fügt eine Referenz auf ${supplierClassName} hinzu.\r\n   *\r\n   * @param obj Referenz auf ${supplierClassName} die als Relation hinzugefügt wird.\r\n   */\r\npublic void addRelation${SupplierRoleName}(\r\n    final ${supplierClassName} obj)\r\n  {\r\n    if (obj \u003d\u003d null)\r\n    {\r\n      throw new BoException(\"Null can\u0027t be added as a relationship reference \"\r\n        + \"for ${className}.relation${supplierRoleName}.\");\r\n    }\r\n\r\n    this.relation${supplierRoleName}.add(obj);\r\n\r\n    //\r\n    //Beziehung auf der Gegenseite (am ${supplierClassName}) zu dieser Klasse (${className})\r\n    //mit Hilfe der set...OneWay-Methode pflegen\r\n    //\r\n    obj.set${ClientRoleName}OneWay(this);\r\n  }\r\n  \r\n/**\r\n   * TOPLink MANY_TO_ANYTHING: Wenn Attribut auf der Gegenseite navigierbar ist\r\n   *\r\n   * @param obj ${supplierClassName} wird hinzugefügt.\r\n   */\r\n  public void addRelation${SupplierRoleName}OneWay(\r\n    ${supplierClassName} obj)\r\n  {\r\n    this.relation${supplierRoleName}.add(obj);\r\n  }\r\n  \r\n /**\r\n   * Dient TOPLink dazu die \u003ccode\u003eList\u003c/code\u003e für lazy-loading der\r\n   * \"n zu\"-Relation zu setzen.\r\n   *\r\n   * @param newList List für TOPLink lazy-loading\r\n   */\r\n  public void setRelation${SupplierRoleName}(final List\u003c${supplierClassName}\u003e newList)\r\n  {\r\n    this.relation${supplierRoleName} \u003d newList;\r\n  }\r\n\r\n/**\r\n   * Lieferte für TOPLink eine \u003ccode\u003eList\u003c/code\u003e der einer \"n zu\"-Relation.\r\n   *\r\n   * @return List\u003c${supplierClassName}\u003e für TOPLink lazy-loading\r\n   */\r\n  public List\u003c${supplierClassName}\u003e getRelation${SupplierRoleName}()\r\n  {\r\n    return this.relation${supplierRoleName};\r\n  }\r\n\r\n  /**\r\n   * Gibt einen Iterator mit Objekten, zu denen eine Relation besteht, zurück.\r\n   *\r\n   * @return NIteratorOf${supplierClassName}\r\n   */\r\n  public NIterator\u003c${supplierClassName}\u003e getRelation${SupplierRoleName}Iterator()\r\n  {\r\n    NIterator\u003c${supplierClassName}\u003e iter \u003d new NIterator\u003c${supplierClassName}\u003e(\r\n      this.relation${supplierRoleName});\r\n\r\n    iter.setTaskServerControllerInterface(getTaskServerControllerInterface());\r\n\r\n    return iter;\r\n  }\r\n\r\n  /**\r\n   * Gibt ein geklontes Set mit Objekten, zu denen die Relation Relation${SupplierRoleName} besteht, zurück.\r\n   *\r\n   * @return Set mit ${supplierClassName}\r\n   */\r\n  public NSet\u003c${supplierClassName}\u003e getRelation${SupplierRoleName}Set()\r\n  {\r\n    NSet\u003c${supplierClassName}\u003e nSet \u003d new NSet\u003c${supplierClassName}\u003e();\r\n    NIterator\u003c${supplierClassName}\u003e iter \u003d getRelation${SupplierRoleName}Iterator();\r\n\r\n    while (iter.hasNext())\r\n    {\r\n      nSet.addTo(iter.next());\r\n    }\r\n\r\n    return nSet;\r\n  }\r\n\r\n/**\r\n   * Entfernt die Relation zu dem übergebenen Objekt.\r\n   *\r\n   * @param obj ${supplierClassName} des Relation entfernt werden soll.\r\n   */\r\n  public void removeRelation${SupplierRoleName}(\r\n    final ${supplierClassName} obj)\r\n  {\r\n    if (obj \u003d\u003d null)\r\n    {\r\n      throw new BoException(\"Null is not a reference which can be removed from\"\r\n        + \" relationship ${className}.relation${supplierRoleName}.\");\r\n    }\r\n    this.relation${supplierRoleName}.remove(obj);\r\n\r\n    //\r\n    //Beziehung auf der Gegenseite (am ${supplierClassName}) zu dieser Klasse (${className})\r\n    //mit Hilfe der set...OneWay-Methode auf null setzen\r\n    //\r\n    obj.set${ClientRoleName}OneWay(null);\r\n  }\r\n\r\n  /**\r\n   * TOPLink MANY_TO_ANYTHING: Wenn Attribut auf der Gegenseite navigierbar ist\r\n   *\r\n   * @param obj ${supplierClassName} wird entfernt.\r\n   */\r\n  public void removeRelation${SupplierRoleName}OneWay(\r\n    ${supplierClassName} obj)\r\n  {\r\n    this.relation${supplierRoleName}.remove(obj);\r\n }\r\n\r\n/**\r\n * Fügt die übergebene Klasse zur Relation Relation${relationName} hinzu.\r\n *\r\n *@param aRelation${SupplierRoleName} ${supplierClassName}\r\n */\r\nprotected void fuegeRelation${SupplierRoleName}Hinzu(final ${supplierClassName} aRelation${SupplierRoleName}) \r\n{\r\n\tBESSM_RelationenController relationenController \u003d \r\n\t\tgetTaskServerControllerInterface().getBesModel(\r\n\t\t\tBESSM_RelationenController.class);\r\n\t\r\n\trelationenController.fuegeRelationHinzu(\r\n\t\tthis, \r\n\t\t\"${ClientRoleName}\", \r\n\t\taRelation${SupplierRoleName},\r\n    \"relation${supplierRoleName}\", \r\n    ${supplierClassName}.class);\r\n}\r\n\r\n/**\r\n * Entfernt die übergebene Klasse zur Relation Relation${relationName}.\r\n *\r\n * @param aRelation${SupplierRoleName} ${supplierClassName}\r\n */\r\nprotected void entferneRelation${SupplierRoleName}(final ${supplierClassName} aRelation${SupplierRoleName}) \r\n{\r\n\tBESSM_RelationenController relationenController \u003d \r\n\t\tgetTaskServerControllerInterface().getBesModel(\r\n\t\t\tBESSM_RelationenController.class);\r\n\t\r\n\trelationenController.entferneRelation(\r\n\t\tthis, \r\n\t\t\"${ClientRoleName}\", \r\n\t\taRelation${SupplierRoleName},\r\n    \"relation${supplierRoleName}\");\r\n    \r\n    /*\r\n     * TODO eventuell die Rolle löschen\r\n     */\r\n}\r\n\r\n/**\r\n * Liefert abhängig vom Zustand (Kontext) der Entitaet alle ${SupplierRoleName}\r\n * der Entitaet.\r\n *\r\n * @return NSet\u003cBoI${SupplierRoleName}\u003e\r\n */\r\nprotected NSet\u003cBoI${SupplierRoleName}\u003e gib${SupplierRoleName}() \r\n{\r\n\tNSet\u003cBoI${SupplierRoleName}\u003e result \u003d \r\n\t\t\tnew NSet\u003cBoI${SupplierRoleName}\u003e();\r\n  \tBESSM_RelationenController relationenController \u003d \r\n  \t\tgetTaskServerControllerInterface().getBesModel(\r\n  \t\t\tBESSM_RelationenController.class);\r\n\r\n    BotContext kontext;\r\n    BoIRelation[] kontextRelationen;\r\n\r\n    kontext \u003d gibKontext();\r\n    kontextRelationen \u003d \r\n    \trelationenController.gibRelationenZuKontext(\r\n    \t\tkontext,\r\n      \tgetRelation${SupplierRoleName}Iterator());\r\n\r\n    if (kontextRelationen !\u003d null)\r\n    {\r\n      for (int i \u003d 0; i \u003c kontextRelationen.length; i++)\r\n      {\r\n        Bo${SupplierRoleName} ${supplierRoleName} \u003d ((${supplierClassName}) kontextRelationen[i])\r\n          .get${SupplierRoleName}();\r\n\r\n        ${supplierRoleName}.initKontext(kontext);\r\n        result.addTo(${supplierRoleName});\r\n      }\r\n    }\r\n    \r\n    return result;\t\r\n}",
  "location": "JAVA_TYPE_MEMBERS",
  "filenameRestrictions": [],
  "dependencies": []
}