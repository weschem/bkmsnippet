{
  "uuid": "9876dd21-c4ae-4813-b629-198fc4de283f",
  "name": "Many-to-1",
  "description": "erzeugt eine bidirektionale Relation \"*-1\"",
  "extraSearchTerms": [
    "manyto1"
  ],
  "tags": [
    "ged",
    "relation"
  ],
  "code": "${:import(java.util.List, java.util.Vector, org.eclipse.persistence.indirection.ValueHolder, org.eclipse.persistence.indirection.ValueHolderInterface, de.bkm.bes.basis.annotation.Indexing, de.bkm.bes.basis.annotation.IndexingType)}\r\n\r\n/**\r\n * Relationen * - 1 (bidirektionale)\r\n * zwischen den Klassen ${primary_type_name}\r\n *   (RoleName ${ClientRoleName:var(java.lang.String)})\r\n * und ${supplierClassName:var(java.lang.String)}\r\n *   (RoleName ${SupplierRoleName:var(java.lang.String)} / ${supplierRoleName:var(java.lang.String)})\r\n * \u003cbr\u003e\r\n */\r\n@Indexing(IndexingType.INDEX)\r\nprivate ValueHolderInterface ${supplierRoleName} \u003d new ValueHolder();\r\n  \r\n  /**\r\n   * Liefert das Objekt, auf das sich die Relation bezieht.\r\n   *\r\n   * @return Objekt vom Typ ${supplierClassName},\r\n   *         auf das die Relation verweist.\r\n   */\r\n  public ${supplierClassName} get${SupplierRoleName}()\r\n  {\r\n    ${supplierClassName} obj \u003d (${supplierClassName}) this.${supplierRoleName}.getValue();\r\n\r\n    if (obj !\u003d null)\r\n    {\r\n      obj.setTaskServerControllerInterface(getTaskServerControllerInterface());\r\n    }\r\n    return obj;\r\n  }\r\n  \r\n  /**\r\n   * Legt fest auf welches Objekt sich die Relation bezieht.\r\n   *\r\n   * @param obj Das Objekt, vom Typ ${supplierClassName},\r\n   *            zu dem eine Relation erzeugt werden soll.\r\n   */\r\n  public void set${SupplierRoleName}(final ${supplierClassName} obj)\r\n  {\r\n  \t// TOPLink ONE_TO_MANY: Wenn Attribut auf der Gegenseite navigierbar ist.\r\n    if (obj \u003d\u003d null)\r\n    {\r\n      // Referenz ist null -\u003e Entfernen auf der Gegenseite\r\n      if (get${SupplierRoleName}() !\u003d null)\r\n      {\r\n      \t//\r\n      \t//Beziehung auf der Gegenseite (am ${supplierClassName}) zu dieser Klasse (${ClientRoleName})\r\n      \t//mit Hilfe der remove...OneWay-Methode entfernen\r\n      \t//\r\n        get${SupplierRoleName}().remove${ClientRoleName}OneWay (this);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      // Referenz ist nicht null...\r\n\r\n      // Ist bereits ein Objekte zugordnet?\r\n      if (get${SupplierRoleName}() !\u003d null)\r\n      {\r\n        // Wenn das gleiche Objekt nochmal gesetzt werden soll,...\r\n        if (obj.getBoId().equals(get${SupplierRoleName}().getBoId()))\r\n        {\r\n          // ...passiert nichts.\r\n          return;\r\n        }\r\n        else\r\n        {\r\n          //\r\n      \t\t//Beziehung auf der Gegenseite (am ${supplierClassName}) zu dieser Klasse (${ClientRoleName})\r\n      \t\t//mit Hilfe der remove...OneWay-Methode entfernen\r\n      \t\t//\r\n          get${SupplierRoleName}().remove${ClientRoleName}OneWay(this);\r\n        }\r\n      }\r\n      //\r\n      //Beziehung auf der Gegenseite (am ${supplierClassName}) zu dieser Klasse (${ClientRoleName})\r\n      //mit Hilfe der add...OneWay-Methode hinzufügen\r\n      //\r\n      obj.add${ClientRoleName}OneWay(this);\r\n    }\r\n    this.${supplierRoleName}.setValue(obj);\r\n  }\r\n  \r\n  /**\r\n   * TOPLink ONE_TO_MANY: Wenn Attribut auf der Gegenseite navigierbar ist.\r\n   *\r\n   * @param obj ${supplierClassName}-Objekt für das eine Relation \r\n   *            hergestellt werden soll\r\n   */\r\n  public void set${SupplierRoleName}OneWay(${supplierClassName} obj)\r\n  {\r\n    // Falls es schon eine Referezen gibt, mu? diese erst entfernt werden.\r\n    if (get${SupplierRoleName}() !\u003d null)\r\n    {\r\n      //\r\n      //Beziehung auf der Gegenseite (am ${supplierClassName}) zu dieser Klasse (${ClientRoleName})\r\n      //mit Hilfe der remove...OneWay-Methode entfernen\r\n      //\r\n      get${SupplierRoleName}().remove${ClientRoleName}OneWay(this);\r\n    }\r\n\r\n    this.${supplierRoleName}.setValue(obj);\r\n  }\r\n  \r\n  /**\r\n   * Gibt den ValueHolder, bei einer 1:n Relation, für TOPLink zurück.\r\n   *\r\n   * @return ValueHolder für das lazy-loading von TOPLink\r\n   */\r\n  public ValueHolderInterface get${SupplierRoleName}Holder()\r\n  {\r\n    ValueHolderInterface holder \u003d this.${supplierRoleName};\r\n\r\n    if (holder.isInstantiated())\r\n    {\r\n      BoInterface bo \u003d (BoInterface) holder.getValue();\r\n      if (bo !\u003d null \u0026\u0026 !bo.getBoId().isValid())\r\n      {\r\n        holder.setValue(null);\r\n      }\r\n    }\r\n    return holder;\r\n  }\r\n  \r\n  /**\r\n   * Setzt den ValueHolder, bei einer \"1-zu\" Relation, für TOPLink.\r\n   *\r\n   * @param valueHolder ValueHolder für das lazy-loading von TOPLink\r\n   */\r\n  public void set${SupplierRoleName}Holder(final ValueHolderInterface valueHolder)\r\n  {\r\n    this.${supplierRoleName} \u003d valueHolder;\r\n  }\r\n  ",
  "location": "JAVA_TYPE_MEMBERS",
  "filenameRestrictions": [],
  "dependencies": []
}