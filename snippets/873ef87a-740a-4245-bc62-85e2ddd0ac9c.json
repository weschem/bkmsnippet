{
  "uuid": "873ef87a-740a-4245-bc62-85e2ddd0ac9c",
  "name": "Statusfaehig",
  "description": "erzeugt die notwendigen Attribute und Methoden um ein Business Object statusfähig zu machen",
  "extraSearchTerms": [
    "Statusfähig",
    "Entitaetenstatus"
  ],
  "tags": [
    "ged",
    "realtion"
  ],
  "code": "${:import(de.jdpe.bof.bo.tm.BotContext, org.eclipse.persistence.indirection.ValueHolder, org.eclipse.persistence.indirection.ValueHolderInterface, de.bkm.bes.basis.history.entity.BesEntitaetRuntimeException, de.bkm.bes.basis.history.entity.BoIEntitaetenstatus, de.bkm.bes.basis.history.entity.BoIStatusfaehigeEntitaet, de.bkm.bes.service.basis.history.entity.BESSM_EntitaetenController)}\r\n\r\n/**\r\n * Aktueller Status der Entitaet vom Typ\r\n * BoStatus_${statusClassName:var(java.lang.String)} \r\n */\r\nprivate transient BoStatus_${statusClassName} status;\r\n\r\n/**\r\n * TOPLink ValueHolder für lazy-loading zum abbilden der \"1-zu\"\r\n * Relation zu BoStatus_${statusClassName} statusliste.\r\n */\r\n@Indexing(IndexingType.INDEX)\r\nprivate ValueHolderInterface statusliste \u003d new ValueHolder();\r\n\r\n/**\r\n * Kontext mit dem die Entitaet initialisiert wurde.\r\n */ \r\nprivate transient BotContext kontext;\r\n\r\n/**\r\n * Initialisiert die Entität in dem angegebenen Kontext.\r\n * Bei Initialisierung mit einem Kontext, zu dem kein Status existiert,\r\n * wird eine Exception geworfen.\r\n *\r\n * @param aKontext BotContext\r\n */\r\n@Override\r\npublic void initKontext(BotContext aKontext) \r\n{\r\n\tBESSM_EntitaetenController entitaetenController \u003d\r\n    getTaskServerControllerInterface().getBesModel(\r\n      BESSM_EntitaetenController.class);\r\n\r\n\t//TODO Die Klasse muss das Interface BoIStatusfaehigeEntitaet implementieren\r\n  setStatus(\r\n    (BoStatus_${statusClassName}) entitaetenController.gibStatusZuKontext(\r\n      aKontext, this));\r\n  setKontext(aKontext);\r\n}\r\n\r\n/**\r\n * Setzt das Attribut Kontext.\r\n *\r\n * @see #kontext\r\n * @param aKontext BotContext\r\n */\r\nprotected void setKontext(BotContext aKontext) \r\n{\r\n\tthis.kontext \u003d aKontext;\r\n}\r\n\r\n/**\r\n * Liefert das Attribut Kontext zurück.\r\n *\r\n * @see #kontext\r\n * @return BotKontext\r\n */\r\nprotected BotContext getKontext() \r\n{\r\n\treturn this.kontext;\r\n}\r\n\r\n/**\r\n * Liefert den Kontext zurück.\r\n *\r\n * @see #kontext\r\n * @return BotContext\r\n */\r\n@Override\r\npublic BotContext gibKontext() \r\n{\r\n\treturn getKontext();\r\n}\r\n\r\n/**\r\n * Setzt das Attribut Status.\r\n *\r\n * @see #status\r\n * @param aStatus BoStatus_${statusClassName}\r\n */\r\nprotected void setStatus(BoStatus_${statusClassName} aStatus) \r\n{\r\n\tthis.status \u003d aStatus;\r\n}\r\n\r\n/**\r\n * Liefert das Attribut Status zurück.\r\n *\r\n * @see #status\r\n * @return BoStatus_${statusClassName}\r\n */\r\nprotected BoStatus_${statusClassName} getStatus() {\r\n\treturn this.status;\r\n}\r\n\r\n/**\r\n * Die Methode erzeugt einen neuen Status für die Entität, der Änderungen \r\n * zuläßt.\r\n * \u003cBR\u003e\r\n * Der Aufruf wird an eine Instanz des EntitätenController deligiert \r\n * (\"beantrageÄnderung\"), welcher aus der Statusliste den aktuell gültigen \r\n * heraussucht und eine änderbare Kopie davon zurückliefert.\r\n * Der zurückgelieferte Status ist in den \"Status\" zu schreiben.\r\n */\r\npublic void beantrageAenderung()\r\n{\r\n\tBESSM_EntitaetenController besEntitaetenController \u003d\r\n    getTaskServerControllerInterface().getBesModel(\r\n      BESSM_EntitaetenController.class);\r\n  \r\n  if (getKontext() !\u003d BotContext.NEUESTER_ZUSTAND)\r\n  {\r\n    setKontext(BotContext.NEUESTER_ZUSTAND);\r\n  }\r\n\r\n  if (getStatus().istBestandswirksam())\r\n  {\r\n    setStatus(\r\n      (BoStatus_${statusClassName}) besEntitaetenController.beantrageAenderung(this));\r\n  }\r\n}\r\n\r\n/**\r\n * Liefert das Ankerobjekt der Statusliste.\r\n *\r\n * @return BoIEntitaetenstatus\r\n */\r\npublic BoIEntitaetenstatus gibStatusliste()\r\n{\r\n\treturn getStatusliste();\r\n}\r\n\r\n/**\r\n * Liefert den RoleName der Statusklasse zur statusfähigen Entität.\r\n *\r\n * @return String\r\n */\r\npublic String gibStatusRoleName()\r\n{\r\n\treturn BoStatus_${statusClassName}.class.getName();\r\n}\r\n\r\n/**\r\n * Liefert den Zeitpunkt zurück, ab dem die Entität in diesem Zustand gültig war.\r\n * \u003cBR\u003e\r\n * Der Methodenaufruf wird an den \"Status\" delegiert.\r\n *\r\n * @return BotTimestamp\r\n */\r\npublic BotTimestamp gibZeitpunktGueltigAb()\r\n{\r\n\treturn getStatus().gibZeitpunktGueltigAb();\r\n}\r\n\r\n/**\r\n * Liefert den Zeitpunkt, bis zu dem die Entität im aktuellen Zustand gültig \r\n * war/ist. Sollte die Gültigkeit nicht begrenzt sein, so wir \"null\" \r\n * zurückgegeben.\r\n * \u003cBR\u003e\r\n * Der Methodenaufruf wird an den \"Status\" delegiert.\r\n *\r\n * @return BotTimestamp\r\n */\r\npublic BotTimestamp gibZeitpunktGueltigBis()\r\n{\r\n\treturn getStatus().gibZeitpunktGueltigBis();\r\n}\r\n\r\n/**\r\n * Überprüft ob die Entität einen beantragten (änderbaren) Zustand \r\n * besitzt.\r\n * \u003cBR\u003e\r\n * Der Aufruf wird an die Methode \"hatBeantragtenZustand\" des \r\n * EntitätenController weitergeleitet.\r\n *\r\n * @return boolean\r\n */\r\npublic boolean hatBeantragung()\r\n{\r\n\tBESSM_EntitaetenController entitaetenController \u003d \r\n    getTaskServerControllerInterface().getBesModel(\r\n       BESSM_EntitaetenController.class);\r\n  \r\n  /*\r\n   * TODO: abhängige (in Komposition stehende ) Klassen und Relationenklassen bearbeiten\r\n   */\r\n\r\n  return entitaetenController.hatBeantragtenZustand(this);\r\n}\r\n\r\n/**\r\n * Überprüft ob die Entität einen bestandswirksamen Zustand besitzt.\r\n * \u003cBR\u003e\r\n * Der Aufruf wird an die Methode \"hatBestandswirksamenZustand\" des EntitätenController\r\n * weitergeleitet.\r\n *\r\n * @return boolean\r\n */\r\npublic boolean istBestandswirksam()\r\n{\r\n\tBESSM_EntitaetenController entitaetenController \u003d \r\n    getTaskServerControllerInterface().getBesModel(\r\n       BESSM_EntitaetenController.class);\r\n\r\n  return entitaetenController.hatBestandswirksamenZustand(this);\r\n}\r\n\r\n/**\r\n * Überprüft ob die Entität im neuesten (aktuellsten) Zustand befindet.\r\n * \u003cBR\u003e\r\n * Der bei der Initialisierung der Entität ermittelte Arbeitsstatus wird mit dem Ankerobjekt\r\n * der Statusliste verglichen. Sind beide identisch, so befindet sich die Entität im aktuellsten\r\n * Zustand.\r\n * \r\n * @return boolean\r\n */\r\npublic  boolean istImAktuellstenZustand() \r\n{\r\n  return (getStatus() \u003d\u003d gibStatusliste());\r\n}\r\n\r\n/**\r\n * Üerprüft ob die Entität sich in einem bestandswirksamen Zustand befindet.\r\n * \u003cBR\u003e\r\n * Der Aufruf wird an die Methode \"istBestandswirksam\" des bei der Initialisierung\r\n * ermittelten Arbeitsstatus delegiert.\r\n *\r\n * @return boolean\r\n */\r\npublic boolean istImBestandswirksamenZustand()\r\n{\r\n\treturn getStatus().istBestandswirksam();\r\n}\r\n\r\n/**\r\n * Löscht einen beantragten Status und alle beantragten Relationen.\r\n * \u003cBR\u003e\r\n * Der Methodenaufruf wird zunächst an eine Instanz des RelationenController\r\n * delegiert, wo alle beantragten Relationen gelöscht werden.\r\n * Danach ist eine Instanz des EntitätenController mit der Löschung des beantragten\r\n * Status zu beauftragen. Die Methode \"löscheBeantragung\" des EntitätenController\r\n * liefert den nach der Löschung gültigen Status zurück, welcher in \"Status\" gesichert\r\n * werden muß.\r\n */\r\npublic void loescheBeantragung()\r\n{\r\n\tBESSM_EntitaetenController entitaetenController \u003d \r\n\t\tgetTaskServerControllerInterface().getBesModel(\r\n\t\t\tBESSM_EntitaetenController.class);\r\n\r\n\t/*\r\n   * TODO: abhängige (in Komposition stehende ) Klassen und Relationenklassen bearbeiten\r\n   */\r\n\r\n   setStatus((BoStatus_${statusClassName}) entitaetenController\r\n      .loescheBeantragung(this));\r\n}\r\n\r\n/**\r\n * Löscht die Entität.\u003cBR\u003e\r\n * Zunächst wird das Ankerobjekt der Statusliste ermittelt und die Referenz anschließend auf \"null\" gesetzt.\r\n * An dem ermittelten Statusobjekt wird dann die Methode \"loescheEntitaetenstatus\" aufgerufen. Das \r\n * Statusobjekt sorgt dafür, daß alle Vorgängerobjekte gelöscht werden und stellt sicher, daß beim Versuch \r\n * bestandswirksame Objekte zu löschen eine Exception ausgelöst wird. Anschließend kann das Statusobjekt \r\n * mit delete gelöscht werden.\u003cBR\u003e\r\n * Sofern Relationen bestehen, müssen diese nun ebenfalls gelöscht werden. Es wird dabei das gleiche Verfahren\r\n * wie bei allen anderen 1:n Relationen angewendet.\r\n */\r\npublic void loescheEntitaet()\r\n{\r\n\tif (!istLoeschbar())\r\n  {\r\n    throw new BesEntitaetRuntimeException(\r\n      BesEntitaetRuntimeException.ERR_ENTITAET_BEREITS_BESTANDSWIRKSAM,\r\n      new String[] { String.valueOf(getBoId()) });\r\n  }\r\n\r\n\t/*\r\n\t * TODO: abhängige (in Komposition stehende ) Klassen und Relationenklassen bearbeiten\r\n\t */\r\n\r\n  setStatus(null);\r\n  (getTaskServerControllerInterface().getBesModel(BESSM_EntitaetenController.class\r\n      )).loescheEntitaet(this);\r\n}\r\n\r\n/**\r\n * Macht einen beantragten Status, sowie beantragte Relationen bestandswirksam.\r\n * \u003cBR\u003e\r\n * 1. Der Aufruf wird an eine Instanz des EntitätenController deligiert, welcher den aktuellen\r\n *     Zustand bestandswirksam macht (\"macheBestandswirksam\").\u003cBR\u003e\r\n * 2. Eine Instanz des RelationenController ist damit zu beauftragen (\"macheBestandswirksam\")\r\n *     alle beantragten Relationen bestandswirksam zu machen.\u003cBR\u003e\r\n * \r\n * @param aZeitpunkt BotTimestamp\r\n */\r\npublic void macheBestandswirksam(BotTimestamp aZeitpunkt)\r\n{\r\n\tBESSM_EntitaetenController entitaetenController \u003d \r\n      getTaskServerControllerInterface().getBesModel(\r\n       BESSM_EntitaetenController.class);\r\n\r\n\t/*\r\n\t * TODO: abhängige (in Komposition stehende ) Klassen und Relationenklassen bearbeiten\r\n\t */\r\n  \r\n  //\r\n  // Entitaet bestandswirksam machen\r\n  //\r\n  entitaetenController.macheBestandswirksam(aZeitpunkt, this);\r\n}\r\n\r\n/**\r\n * Prüft die Integrität und Vollständigkeit der Entität. Diese Methode wird in\r\n * \"EntitätenController.macheBestandswirksam\" aufgerufen, bevor ein Status\r\n * bestandswirksam gemacht wird. Sollte die Integrität bzw. Vollständigkeit\r\n * der Entität nicht gegeben sein, so ist eine entsprechende Exception zu werfen.\r\n */\r\npublic void pruefeEntitaet()\r\n{\r\n\t/*\r\n   * TODO: Prüfung für abhängige (in Komposition stehende ) Klassen und \r\n   * Relationenklassen durchführen\r\n\t */\r\n}\r\n\r\n/**\r\n * Trägt das übergebene Statusobjekt als Ankerobjekt der Statusliste ein.\r\n *\r\n * @param aStatusliste BoIEntitaetenstatus\r\n */\r\npublic void setzeStatusliste(BoIEntitaetenstatus aStatusliste)\r\n{\r\n\tsetStatusliste((BoStatus_${statusClassName})aStatusliste);\r\n}\r\n\r\n/**\r\n * Legt fest auf welches Objekt sich die Relation bezieht.\r\n *\r\n * @param obj Das Objekt, vom Typ BoStatus_${statusClassName},\r\n *            zu dem eine Relation erzeugt werden soll.\r\n */\r\npublic void setStatusliste(final BoStatus_${statusClassName} obj)\r\n{\r\n  this.statusliste.setValue(obj);\r\n}\r\n\r\n/**\r\n * Setzt den ValueHolder, bei einer \"1-zu\" Relation, für TOPLink.\r\n *\r\n * @param valueHolder ValueHolder für das lazy-loading von TOPLink\r\n */\r\npublic void setStatuslisteHolder(final ValueHolderInterface valueHolder)\r\n{\r\n  this.statusliste \u003d valueHolder;\r\n}\r\n\r\n/**\r\n * Liefert das Objekt, auf das sich die Relation bezieht.\r\n *\r\n * @return Objekt vom Typ BoStatus_${statusClassName},\r\n *         auf das die Relation verweist.\r\n */\r\npublic BoStatus_${statusClassName} getStatusliste()\r\n{\r\n\tBoStatus_${statusClassName} obj \u003d (BoStatus_${statusClassName}) this.statusliste.getValue();\r\n\r\n\tif (obj !\u003d null)\r\n  {\r\n  \tobj.setTaskServerControllerInterface(getTaskServerControllerInterface());\r\n\t}\r\n  return obj;\r\n}\r\n  \r\n/**\r\n * Gibt den ValueHolder, bei einer 1:n Relation, für TOPLink zurück.\r\n *\r\n * @return ValueHolder für das lazy-loading von TOPLink\r\n */\r\npublic ValueHolderInterface getStatuslisteHolder()\r\n{\r\n\tValueHolderInterface holder \u003d this.statusliste;\r\n\r\n  if (holder.isInstantiated())\r\n  {\r\n  \tBoInterface bo \u003d (BoInterface) holder.getValue();\r\n    if (bo !\u003d null \u0026\u0026 !bo.getBoId().isValid())\r\n    {\r\n    \tholder.setValue(null);\r\n    }\r\n  }\r\n  return holder;\r\n}\r\n\r\n/**\r\n * Erzeugt eine Instanz der Status-Klasse und speichert sie in der \"Statusliste\",\r\n * sowie in \"Status\".\r\n */\r\npublic void initErzeugungsstatus()\r\n{\r\n    setStatus((BoStatus_${statusClassName}) getTaskServerControllerInterface().getBesModel(BESSM_EntitaetenController.class\r\n      ).initErzeugungsstatus(this));\r\n    setKontext(BotContext.NEUESTER_ZUSTAND);\r\n}\r\n\r\n/**\r\n * Prüft, ob die Entitaet gelöscht werden darf.\r\n *\r\n * @return boolean\r\n */\r\npublic boolean istLoeschbar() \r\n{\r\n\t//TODO eventuell fachliche Regeln hier aufnehmen\r\n\treturn !istBestandswirksam();\r\n}",
  "location": "JAVA",
  "filenameRestrictions": [],
  "dependencies": []
}